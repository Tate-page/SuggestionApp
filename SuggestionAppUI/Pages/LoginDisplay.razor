@page "/LogIn"
@using SuggestionAppUI.Models
@inject IUserData userData
@inject NavigationManager NavManager
@inject ProtectedSessionStorage BrowserStorage
@inject ILoggedInUser loggedInUser
@using Newtonsoft.Json;

<div class="d-flex flex-row justify-content-center">
    <div id="FormDiv" class="d-flex flex-column m-3">
        <div id="FormHeader" class="d-flex flex-row justify-content-center">
            <h1>Log In</h1>
        </div>
        <div id="FormBody" class="d-flex flex-row">
            <EditForm Model="@loginUser" OnValidSubmit="@handleLogin" class="d-flex flex-column justify-content-center">
                <div class="d-flex flex-row justify-content-center p-1">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (errorStatus == 1)
                    {
                        <p style="color:green;"> @loggedInUser.DisplayName has been logged in!!</p>
                    }
                    else
                    {
                        <p>@errorText</p>
                    }
                </div>

                <div class="d-flex flex-row justify-content-center p-1">
                    <p class="pt-1 pb-0 m-0">Display Name:</p>
                    <InputText id="DisplayNameInput" @bind-Value="loginUser.DisplayName" />
                    <ValidationMessage For="@(() => loginUser.DisplayName)" />
                </div>
                
                <div class="d-flex flex-row justify-content-center p-1">
                    <p class="pt-1 pb-0 m-0">Password:</p>
                    <InputText id="PasswordInput" @bind-Value="loginUser.Password" />
                    <ValidationMessage For="@(() => loginUser.Password)" />
                </div>

                <div class="d-flex flex-row justify-content-center p-1">
                    <button type="submit" class="btn btn-primary" value="Save" style="background-color: rgb(0, 0, 200)">LogIn</button>
                </div>
                
            </EditForm>
        </div>
        
    </div>
</div>




@code {
    private loginUser loginUser = new();
    private bool isUserValid = false;
    private int errorStatus = 0;
    private string errorText;
    private string sessionStorageName = "loggedInUser";
    //private UserModel loggedInUser=new();

    private async Task handleLogin()
    {
        try
        {
            var results = await userData.getLoggedInUserIfValidAsync(loginUser.DisplayName, loginUser.Password);
            loggedInUser.Id = results.Id;
            loggedInUser.FirstName = results.FirstName;
            loggedInUser.LastName = results.LastName;
            loggedInUser.DisplayName = results.DisplayName;
            loggedInUser.EmailAddress = results.EmailAddress;
            loggedInUser.AuthoredSuggestion = results.AuthoredSuggestion;
            loggedInUser.VotedOnSuggestions = results.VotedOnSuggestions;
            loggedInUser.isAdmin = await userData.getAdminLevelFromDisplayName(loginUser.DisplayName);
            if(loggedInUser.FirstName is not null)
            {
                isUserValid = true;    
            }
            
            }catch(Exception ex)
            {
                errorStatus = 2;
                errorText = ex.ToString();
            }


            if(!loggedInUser.IsLoggedIn && isUserValid)
            {
                errorStatus = 1;
                string json = JsonConvert.SerializeObject(loggedInUser);
                loggedInUser.IsLoggedIn = true;
                BrowserStorage.SetAsync(sessionStorageName, json);
                StateHasChanged();
            }

    }
}
