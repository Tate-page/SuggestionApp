@page "/Profile"
@using SuggestionAppUI.Models
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject ILoggedInUser loggedInUser

<h1 class="pageHeading text-uppercase mb-4">My Profile</h1>
@if (loggedInUser.IsLoggedIn)
{
    <div class="formLayout mb-3 ">
        <h2 class="mySubmissionHeading">My Account</h2>
        <p class="mySubmissionText">
            <a href="#">
                Edit My Profile
            </a>
        </p>
    </div>
    @if (approved?.Count > 0)
    {
        <div class="formLayout mb-3 ">
            <h2 class="mySubmissionHeading">Approved Suggestions</h2>
            <p class="mySubmissionText">These are your suggestions that are currently active.</p>

            @foreach (var s in approved)
            {
                <hr class="mySubmissionSeperator" />
                <div class="fw-bold suggestionDetailSuggestion">
                    @s.Suggestion
                </div>
                <p class="mySubmissionText">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <p class="mySubmissionText">
                    Total Votes: @s.UserVotes?.Count
                </p>
                <p class="mySubmissionText">
                    @s.Category.CategoryName
                </p>
                <p class="mySubmissionText">
                    @s.Description
                </p>
                @if (s.SuggestionStatus is not null)
                {
                    <div class="fw-bold suggestionDetailSuggestion">
                        @s.SuggestionStatus.StatusName
                    </div>
                    <p class="mySubmissionText">
                        @((MarkupString)s.OwnerNotes)
                    </p>
                }
            }
        </div>
    }

    @if (archived?.Count > 0)
    {
        <div class="formLayout mb-3 ">
            <h2 class="mySubmissionHeading">Archived Suggestions</h2>
            <p class="mySubmissionText">These are your suggestions that are currently archived for violating guidelines.</p>

            @foreach (var s in archived)
            {
                <hr class="mySubmissionSeperator" />
                <div class="fw-bold suggestionDetailSuggestion">
                    @s.Suggestion
                </div>
                <p class="mySubmissionText">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <p class="mySubmissionText">
                    Total Votes: @s.UserVotes?.Count
                </p>
                <p class="mySubmissionText">
                    @s.Category.CategoryName
                </p>
                <p class="mySubmissionText">
                    @s.Description
                </p>
                @if (s.SuggestionStatus is not null)
                {
                    <div class="fw-bold suggestionDetailSuggestion">
                        @s.SuggestionStatus.StatusName
                    </div>
                    <p class="mySubmissionText">
                        @((MarkupString)s.OwnerNotes)
                    </p>
                }
            }
        </div>
    }

    @if (pending?.Count > 0)
    {
        <div class="formLayout mb-3 ">
            <h2 class="mySubmissionHeading">Pending Suggestions</h2>
            <p class="mySubmissionText">These are your suggestions that were active but did not gain enough traction.</p>

            @foreach (var s in pending)
            {
                <hr class="mySubmissionSeperator" />
                <div class="fw-bold suggestionDetailSuggestion">
                    @s.Suggestion
                </div>
                <p class="mySubmissionText">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <p class="mySubmissionText">
                    Total Votes: @s.UserVotes?.Count
                </p>
                <p class="mySubmissionText">
                    @s.Category.CategoryName
                </p>
                <p class="mySubmissionText">
                    @s.Description
                </p>
                @if (s.SuggestionStatus is not null)
                {
                    <div class="fw-bold suggestionDetailSuggestion">
                        @s.SuggestionStatus.StatusName
                    </div>
                    <p class="mySubmissionText">
                        @((MarkupString)s.OwnerNotes)
                    </p>
                }
            }
        </div>
    }

    @if (rejected?.Count > 0)
    {
        <div class="formLayout mb-3 ">
            <h2 class="mySubmissionHeading">Rejected Suggestions</h2>
            <p class="mySubmissionText">These are your suggestions that were not deemed to be appropriate for the training suggestion site.</p>

            @foreach (var s in rejected)
            {
                <hr class="mySubmissionSeperator" />
                <div class="fw-bold suggestionDetailSuggestion">
                    @s.Suggestion
                </div>
                <p class="mySubmissionText">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <p class="mySubmissionText">
                    Total Votes: @s.UserVotes?.Count
                </p>
                <p class="mySubmissionText">
                    @s.Category.CategoryName
                </p>
                <p class="mySubmissionText">
                    @s.Description
                </p>
                @if (s.SuggestionStatus is not null)
                {
                    <div class="fw-bold suggestionDetailSuggestion">
                        @s.SuggestionStatus.StatusName
                    </div>
                    <p class="mySubmissionText">
                        @((MarkupString)s.OwnerNotes)
                    </p>
                }
            }
        </div>
        
}

}
else
{
    <p>You are not allowed here.</p>
}





@code {
    private List<SuggestionModel> submissions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> archived;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> rejected;

    protected async override Task OnInitializedAsync()
    {
        if (loggedInUser.IsLoggedIn)
        {
            var results = await suggestionData.GetUsersSuggestionsAsync(loggedInUser.Id);

            if (loggedInUser is not null && results is not null)
            {

                submissions = results.OrderByDescending(s => s.DateCreated).ToList();
                approved = submissions.Where(s => s.ApprovedForRelease && s.Archived == false & s.Rejected == false).ToList();
                archived = submissions.Where(s => s.Archived && s.Rejected == false).ToList();
                pending = submissions.Where(s => s.ApprovedForRelease == false && s.Rejected == false).ToList();
                rejected = submissions.Where(s => s.Rejected).ToList();
            }
        }
        
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
