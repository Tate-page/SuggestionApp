@page "/"
@using SuggestionAppUI.Models
@inject ILoggedInUser loggedInUser
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="pageHeading text-uppercase mb-4">Training Suggestions</h1>
<div class="suggestionContainer">
    <button @onclick="LoadCreatePage" class="suggestBtn btn btn-outline-light btn-lg text-uppercase">Suggest</button>
</div>

<div class="row">
    <div class="suggestionsCount col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button @onclick="(() => OrderByNew(true))" class="btn btn-order @SortedByNewClass(true)">New</button>
        <button @onclick="(() => OrderByNew(false))" class="btn btn-order @SortedByNewClass(false)">Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 searchBox">
        <input type="text" placeholder="Search" 
               aria-label="Search box" 
               class="form-control roundedControl"
               @oninput="((txt) => OnSearchInput((string)txt.Value))"/>
        

    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (suggestions is not null)
        {
            //infinitely scrolling list
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div class="suggestionEntry">
                    <div class="@GetVoteClass(s)" @onclick="(() => VoteUp(s))">
                        <div class="text-uppercase">@getUpvoteTopText(s)</div>
                        <span id="upvoteArrow" class="oi oi-caret-top entryUpvote" ></span>
                        <div class="text-uppercase" >@getUpvoteBottomText(s)</div>
                    </div>
                    <div class="suggestionEntryText">
                        <div class="suggestionEntryTextTitle" @onclick="(() => OpenDetails(s))">
                            @s.Suggestion
                        </div>
                        <div  @onclick="(() => OpenDetails(s))" class="suggestionEntryTextCategory">
                            @s.Category?.CategoryName
                        </div>
                    </div>
                    <div class="suggestionEntryStatus @GetSuggestionStatusClass(s)">
                        <div class="suggestionEntryStatusText">
                            @s.SuggestionStatus?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if(categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Category</span>
                <div @onclick="(() => OnCategoryClick())" class="@GetSelectedCategory()">All</div>
                @foreach(var c in categories)
                {
                    <div @onclick="(() => OnCategoryClick(c.CategoryName))" class="@GetSelectedCategory(c.CategoryName)">
                        @c.CategoryName
                    </div>
                }
            </div>
        }

        @if (statuses is not null)
        {
            <div class="statuses">
                <span class="text-uppercase fw-bold">Status</span>
                <div @onclick="(() => OnStatusClick())" class="@GetSelectedStatus()">All</div>
                @foreach(var s in statuses)
                {
                    <div @onclick="(() => OnStatusClick(s.StatusName))" class="@GetSelectedStatus(s.StatusName)">
                        @s.StatusName
                    </div>
                }
            </div>
        }
    </div>
</div>



@code{
    private List<SuggestionModel> suggestions = new();
    private List<CategoryModel> categories = new();
    private List<StatusModel> statuses = new();

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override void OnInitialized()
    {
        categories = await categoryData.GetAllCategoriesAsync();
        statuses = await statusData.getAllStatusesAsync();
        suggestions = await suggestionData.GetAllApprovedSuggestionsAsync();
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();//only in the first render, if not it will cause loop
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestionsAsync();

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName.ToString() == selectedCategory).ToList();


        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if(string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                s => s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes?.Count)
                            .ThenByDescending(s => s.DateCreated).ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string cateogry = "All")
    {
        selectedCategory = cateogry;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private string getUpvoteTopText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if(suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";    
            }

        }
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if (loggedInUser.IsLoggedIn)
        {
            if(suggestion.Author.Id == loggedInUser.Id)
            {
                //cannot vote on your own suggestion
                return;
            }

            if(suggestion.UserVotes is null)
            {
                suggestion.UserVotes = await suggestionData.getUpvotesBySuggestionIDAsync(suggestion.Id);
            }

            if(suggestion.UserVotes is not null && suggestion.UserVotes.Any(votes => votes.UserID == loggedInUser.Id))
            {
                //remove upvote
                UserVotesModel userVote = suggestion.UserVotes.Where(votes => votes.UserID == loggedInUser.Id).FirstOrDefault();
                suggestion.UserVotes.Remove(userVote);
            }
            else
            {
                UserVotesModel temp = new()
                {
                    SuggestionID = suggestion.Id,
                    UserID = loggedInUser.Id
                };
                suggestion.UserVotes.Add(temp);
            }

            //stored proc checks if upvote exists before removing or adding it
            await suggestionData.UpvoteSuggestionAsync(suggestion.Id, loggedInUser.Id);    

            if(isSortedByNew == false)
            {
                suggestions = suggestions
                .OrderByDescending(s => s.UserVotes?.Count)
                .ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {
            navManager.NavigateTo($"/CreateUser", true);
        }
    }

    private string getUpvoteBottomText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }

    private void LoadCreatePage()
    {
        if (loggedInUser.IsLoggedIn)
        {
            navManager.NavigateTo("/Create");
        }
        else
        {
            navManager.NavigateTo("/Login");
        }
    }

    private string SortedByNewClass(bool isNew)
    {
        if(isNew == isSortedByNew)
        {
            return "sortSelected";
        }
        else
        {
            return "";
        }
    }

    private string GetVoteClass(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestionEntryNoVotes";
        }else if(loggedInUser.IsLoggedIn && suggestion.UserVotes.Any(votes => votes.UserID == loggedInUser.Id))
        {
            return "suggestionEntryVoted";
        }
        else
        {
            return "suggestionEntryNotVoted";
        }
    }

    private string GetSuggestionStatusClass(SuggestionModel suggestion)
    {
        if(suggestion is null || suggestion.SuggestionStatus is null)
        {
            return "suggestionEntryStatusNone";
        }

        string output = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestionEntryStatusCompleted",
            "Watching" => "suggestionEntryStatusWatching",
            "Upcoming" => "suggestionEntryStatusUpcoming",
            "Dismissed" => "suggestionEntryStatusDismissed",
            _ => "suggestionEntryStatusNone",
        };
        return output;
    }

    private string GetSelectedCategory(string category = "All")
    {
        if(category == selectedCategory)
        {
            return "selectedCategory";
        }
        else
        {
            return "";
        }
    }

    private string GetSelectedStatus(string category = "All")
    {
        if(category == selectedStatus)
        {
            return "selectedStatus";
        }
        else
        {
            return "";
        }
    }
}
